#!/usr/bin/perl
# Richard Jamieson : 2/7/2016
# Based on functional spec (20160428-1)
# See: https://sourceforge.net/projects/mulops
# Catalogs in JSON format
#
use strict;
use warnings;
use Getopt::Std;
use File::Basename;
use File::Spec;

###########################################################################################
# Set a default location for catalogs and perl modules
my $default_catalogs_dir ;
my $default_models_dir ;

BEGIN
   {
      my $default_perlmods_dir ;
      my $default_doc_dir ;
      my $mulops_bin = dirname($0) ;
      my $abs_path_mulops_bin = File::Spec->rel2abs( $mulops_bin ) ;
      my $mulops_top_dir = dirname($abs_path_mulops_bin) ;
      $ENV{PATH} .= ":$abs_path_mulops_bin" ;
      $default_catalogs_dir = "$mulops_top_dir/catalogs" ;
      $default_models_dir = "$mulops_top_dir/models" ;
      $default_doc_dir = "$mulops_top_dir/docs" ;
      $ENV{MULOPS_DOCS} = $default_doc_dir ;
      $default_perlmods_dir = dirname($abs_path_mulops_bin) . "/lib" ;
      if ( -d $default_perlmods_dir ) {
         push ( @INC,"$default_perlmods_dir");
         $ENV{PERL5LIB} .= ":$default_perlmods_dir";
      }
   }
use JSON;	# Only required when using "MULMODEL" variable
use MULOPS;

###########################################################################################
# Process command line arguments ( See "mulops usage" )

our($opt_c,$opt_u,$opt_o,$opt_d,$opt_g) ;
getopts('cdumog') or die &usage;
my $group_items ;
my $mulops_mode;
if ($opt_o) {
   $mulops_mode = "oscommand";
} elsif ($opt_c) {
   $mulops_mode = "catalog";
} elsif ($opt_d) {
   $mulops_mode = "description";
} else {
   $mulops_mode = "execute";
}

my @mulops_command_args ;
my $picked_group ;
if ($opt_g) {
   my $mulops_group = getGroup("$default_catalogs_dir/mulgroup.default.json") ;
   my @mulops_group_keys = keys $mulops_group->{'mulgroups'} ;
   $picked_group = $ARGV[0];
   if ( (defined($picked_group)) && (exists $mulops_group->{'mulgroups'}->{$picked_group}->{group}) ) {
      $group_items = $mulops_group->{'mulgroups'}->{$picked_group}->{group};
   }
   if (! defined($group_items)) {
      #print "$mulops_group->{'mulgroup-description'} \n";
      printf("%-17s %s \n", "#mulops-group", "description");
      printf("%-17s %s \n", "#----------------", "----------------------------------------");
      foreach my $mulgroup (@mulops_group_keys) {
         printf("%-17s %s \n", "$mulgroup", "$mulops_group->{'mulgroups'}->{$mulgroup}->{description}");
      }
      exit 0;
   }
   #print "picked_group: $picked_group \n";
   #print "group items: @$group_items \n";
   @mulops_command_args = @$group_items ;
} else {
   @mulops_command_args = @ARGV ;
}


&usage if $opt_u ;

###########################################################################################
# Get details of all catalogs
my $env_catalogs = $ENV{'MULOPS_CATALOGS'};
my @catalogs = split(' ', $env_catalogs) if defined($env_catalogs);
if (! @catalogs) {
   @catalogs = glob("$default_catalogs_dir/mulcat.*.json");
}

my %catalog_cache = map { $_ => {} } @catalogs;
my $catalog_cache = \%catalog_cache ;

###########################################################################################
# MODELING CODE
# If a model is used, locad up the cache with the data from that model
my $mulops_output_cache = {}   ;
my $env_model = $ENV{'MULMODEL'};
if (defined($env_model))  {
   my $model_file = "$default_models_dir/model.$env_model.json";
   if ( ! -r $model_file ) { 
      print "Cant find model file : $model_file\n" ;
      exit 1 ;
   } else {
      local $/; #Enable 'slurp' mode
      open my $fh, "<", "$model_file" or die "Cant open model file : $model_file";;
      my $model_file_data = <$fh>;
      close $fh;
      $mulops_output_cache = from_json($model_file_data);
   }
}
###########################################################################################


###########################################################################################
# Run mulops !

$mulops_mode = "description" if not @mulops_command_args ;;
@mulops_command_args = qw/all/  if not @mulops_command_args ;

my $mulops_command_arg;
foreach my $loopvar (@mulops_command_args) {
   $mulops_command_arg = $loopvar ;   # We need mulops_command_arg after this loop
   mulops($mulops_command_arg,$mulops_mode,$catalog_cache,$mulops_output_cache) ;
}
my @all_cache_keys = sort keys %$mulops_output_cache ;
@all_cache_keys = grep !/^all$/, @all_cache_keys; # not sure how 'all' gets in there !

if ($mulops_command_arg eq "all") {
   @mulops_command_args = @all_cache_keys ;
}
my $num_mulops_command_args = scalar @mulops_command_args ;

if ( (not defined($picked_group)) && ( $num_mulops_command_args eq 1 ) ) {
      my $value = $mulops_output_cache->{$mulops_command_arg}->{$mulops_mode};
      print "$value\n";
      if ( $mulops_mode eq "execute" ) { 
         my $exit_status = $mulops_output_cache->{$mulops_command_arg}->{exit_status};
         exit 1 if ( $exit_status ne "pass" ) ;
      }
} else  {
   my $mulops_exit_code = 0 ;
   if ( $mulops_mode eq "execute" ) {
      printf("%-17s %-10s %-7s %s \n", "#mulops-command", "catalog", "status", "output");
      printf("%-17s %-10s %-7s %s \n", "#----------------", "----------", "-------", "---------------------------------------------------------------------");
   } else {
      printf("%-17s %-10s %s \n", "#mulops-command", "catalog", "$mulops_mode");
      printf("%-17s %-10s %s \n", "#----------------", "----------", "---------------------------------------------------------------------");
   }
   foreach my $cache_value (@mulops_command_args) {
      if (grep {$_ eq $cache_value} @all_cache_keys) {
         my $cat_name = $mulops_output_cache->{$cache_value}->{'cat_name'};
         my $value = $mulops_output_cache->{$cache_value}->{$mulops_mode};
         my @lines = split /\n/, $value;
         if ( $mulops_mode eq "execute" ) {
            my $exit_status;
            if ( defined ($env_model) ) {
               $exit_status = "model";
            } else {
               $exit_status = $mulops_output_cache->{$cache_value}->{exit_status};
            }
            $mulops_exit_code++ if ( $exit_status eq "fail" );
            foreach my $line (@lines) {
               printf("%-17s %-10s %-7s %s \n", "$cache_value", "$cat_name", "$exit_status", $line);
            }
         } else {
            foreach my $line (@lines) {
               printf("%-17s %-10s %s \n", "$cache_value", "$cat_name", $line);
            }
         }
      }
   }
   exit $mulops_exit_code ;
}
   

###########################################################################################
sub usage {
   system("mulops usage.doc");
   exit;
}
###########################################################################################
# Params = catalog
# Return = hashref
sub getGroup {
   # Can add another parameter later - to signify format and maybe source of catalog
   my ($group) = @_;
   #print "Get Group : $group \n";
   my $mulops_group;
   if ( $group =~ "^http:" ) {
      my $http = HTTP::Lite->new;
      my $req = $http->request("$group") or die "Unable to get document: $!";
      die "Request failed ($req): ".$http->status_message() if $req ne "200";
      my $mulops_url_data = $http->body();
      $mulops_group = from_json($mulops_url_data);
   } else {
     my $mulops_file_data;
     local $/; #Enable 'slurp' mode
     open my $fh, "<", "$group";
     $mulops_file_data = <$fh>;
     close $fh;
     $mulops_group = from_json($mulops_file_data);
   }
   return $mulops_group ;
}
###########################################################################################
# POD info

=head1 NAME

 mulops - Multi Operating System tool
          Simple consistent commands..

=head1 SYNOPSIS

 See "mulops manual" or "mulops usage"

=head1 DESCRIPTION

 Different operating systems have different ways of doing the same thing.
 ( eg: showing total amount of system memory ).
 This tool aims to help to provide a consistent way to do the same things
 across multiple operating systems.
 The tool can be used for one-off commands, to create portable system
 programs, or just for education


=head1 INSTALL

 See "mulops readme"

=head1 AUTHORS

 Richard Jamieson richard.jamieson@scsuk.net

