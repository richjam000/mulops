#!/bin/ksh
############################################################################
# R. Jamieson 22/4/2016
# Shell script version of "mulops"
# This code been battered around a bit over the years - all needs re-testing.
# Just getting first draft version ready for additions to source control system.
#

function usage
{
cat <<EOT
   mulops               :       Shows lookup-keys and descriptions )
   mulops {lookup key}  :       Looks up details on the key
   mulops [ -f lookup-file ] [ -f lookup-file ]     :  overrides default lookup file
   Default lookup file is in same directory as the script, called "mulops.catalog"

   Variables:
   OSTYPE              :       OS type/"ostype", ie: AIX or SunOS or HP-UX or Lunux
   MULOPS_CATALOG     :       Names of mulops catalog files
   VERSION              :       OS Version

EOT
}

############################################################################
##########
# Process params

DOCONLY=NO
while getopts udf: option
do
   case $option in
   u)   usage
        exit 0 ;;
   f)   OSINFO_FILE=$OPTARG
        if [ ! -f "$OSINFO_FILE" ]; then
           echo "File does not exist: $OSINFO_FILE"
           usage
           exit 1
        fi
        MULOPS_CATALOG="$OSINFO_FILE $MULOPS_CATALOG"
        OSINFO_FILE="" ;;
   d)   DOCONLY=YES ;;
   *)   echo "Unrecognised parameter: $option "
        usage
        exit 0 ;;
   esac
done

shift $(($OPTIND -1))

OSTYPE=${OSTYPE:-$(uname -s)} # AIX or SunOS or HP-UX or Linux
# Linux note: I dont know how to tell the version/subver info yet, so
# script for the moment I'll just set version by checking /etc/redhat-release
# Will only set Linux VERSION, not SUBVER
case "$OSTYPE" in
AIX)    OSTYPE="unix_aix"
        VERSION=${VERSION:-$(uname -v)} ;;
SunOS)  OSTYPE="unix_solaris"
        VERSION=${VERSION:-$(uname -r | cut -d '.' -f 2)} ;;
HP-UX)  OSTYPE="unix_hpux"
        VERSION=${VERSION:-$(uname -r | cut -d '.' -f 3)} ;;
Linux)  OSTYPE="unix_linux"
        RH3=$(grep "Red Hat Enterprise Linux AS release 3" /etc/redhat-release 2>/dev/null )
        RH2=$(grep "Red Hat Linux Advanced Server release 2" /etc/redhat-release 2>/dev/null ) 2>/dev/null
        VERSION=${VERSION:-ALL}
        [ "$RH3" != "" ] && VERSION=${VERSION:-RedHat3}
        [ "$RH2" != "" ] && VERSION=${VERSION:-RedHat2}
        if [ "$VERSION" = "" ] ; then
           echo "This version of Linux not supported"
           echo "Only support:"
           echo "Red Hat Enterprise Linux AS release 3"
           echo "Red Hat Linux Advanced Server release 2"
           echo "see /etc/redhat-release"
           exit 1
        fi ;;
*)      echo "OSTYPE: $OSTYPE not tested"
        exit 0 ;;
esac


###################################################################
MULOPS_CATALOG=${MULOPS_CATALOG:-$(dirname $0)/../etc/mulops.catalog.*.dsv}
# Describe the fields in the MULOPS_CATALOG file
KEY_TYPE=1              # Either "COM" or "DESC"
KEY_NAME=2

# DESC RECORDS
KEY_DESCRIPTION=3

# COM RECORDS
OS_NAME=3
OS_VERSION=4
OS_COMMANDS=5
###################################################################


KEY="$*"
if [ "$KEY" = "" ] ; then
   echo "ostype#Operating System Type ($OSTYPE)"
   echo "ostype#Operating System Version ($VERSION)"
   grep -hv ^# $MULOPS_CATALOG | grep DESC | cut -d '#' -f ${KEY_NAME},$KEY_DESCRIPTION
   exit 0
fi
DESCRIPTION=$(grep ^"$KEY" $MULOPS_CATALOG | grep DESC | cut -d '#' -f $KEY_DESCRIPTION)

grep -h ^"COM#$KEY#" $MULOPS_CATALOG 2>/dev/null | grep $OSTYPE | while read FILEINFO ; do
   THE_VERSION=$(echo $(echo $FILEINFO | cut -d '#' -f $OS_VERSION))
   if [ "$VERSION" = "$THE_VERSION" ] ; then
      EXACT_MATCHING_RECORD="$FILEINFO"
   else
      if [ "$THE_VERSION" = "" ] ; then
         # This is the default version for this OSTYPE
         OS_DEFAULT_RECORD=$FILEINFO
      fi
   fi
done

FOUND_RECORD=${FOUND_RECORD:-$EXACT_MATCHING_RECORD}
FOUND_RECORD=${FOUND_RECORD:-$VERSION_DEFAULT_RECORD}
FOUND_RECORD=${FOUND_RECORD:-$OS_DEFAULT_RECORD}

if [ "$FOUND_RECORD" != "" ] ; then
   THE_COMMANDS=$(echo $(echo $FOUND_RECORD | cut -d '#' -f $OS_COMMANDS))
   if [ "$DOCONLY" = YES ] ; then
      echo "$THE_COMMANDS"
   else
      eval "$THE_COMMANDS"
   fi
   return 0
else
   # At this stage nothing found, so just echo out the $KEY
   echo "${KEY}"
   return 1
fi

